//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class GeneratedAPI {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    startGame(): Promise<number> {
        let url_ = this.baseUrl + "/api/v1/game/startGame";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStartGame(_response);
        });
    }

    protected processStartGame(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @return Success
     */
    getBoard(gameID: number): Promise<BoardDisplay> {
        let url_ = this.baseUrl + "/api/v1/game/{gameID}/getBoard";
        if (gameID === undefined || gameID === null)
            throw new Error("The parameter 'gameID' must be defined.");
        url_ = url_.replace("{gameID}", encodeURIComponent("" + gameID));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBoard(_response);
        });
    }

    protected processGetBoard(response: Response): Promise<BoardDisplay> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as BoardDisplay;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BoardDisplay>(null as any);
    }

    /**
     * @param row (optional) 
     * @param col (optional) 
     * @return Success
     */
    getMoves(gameID: number, row: number | undefined, col: number | undefined): Promise<number[][]> {
        let url_ = this.baseUrl + "/api/v1/game/{gameID}/getMoves?";
        if (gameID === undefined || gameID === null)
            throw new Error("The parameter 'gameID' must be defined.");
        url_ = url_.replace("{gameID}", encodeURIComponent("" + gameID));
        if (row === null)
            throw new Error("The parameter 'row' cannot be null.");
        else if (row !== undefined)
            url_ += "row=" + encodeURIComponent("" + row) + "&";
        if (col === null)
            throw new Error("The parameter 'col' cannot be null.");
        else if (col !== undefined)
            url_ += "col=" + encodeURIComponent("" + col) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMoves(_response);
        });
    }

    protected processGetMoves(response: Response): Promise<number[][]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number[][];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number[][]>(null as any);
    }

    /**
     * @param row (optional) 
     * @param col (optional) 
     * @return Success
     */
    movePiece(gameID: number, row: number | undefined, col: number | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/v1/game/{gameID}/movePiece?";
        if (gameID === undefined || gameID === null)
            throw new Error("The parameter 'gameID' must be defined.");
        url_ = url_.replace("{gameID}", encodeURIComponent("" + gameID));
        if (row === null)
            throw new Error("The parameter 'row' cannot be null.");
        else if (row !== undefined)
            url_ += "row=" + encodeURIComponent("" + row) + "&";
        if (col === null)
            throw new Error("The parameter 'col' cannot be null.");
        else if (col !== undefined)
            url_ += "col=" + encodeURIComponent("" + col) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMovePiece(_response);
        });
    }

    protected processMovePiece(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as string;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export interface BoardDisplay {
    rows?: BoardDisplayRow[] | undefined;
}

export interface BoardDisplayRow {
    squares?: BoardDisplaySquare[] | undefined;
}

export interface BoardDisplaySquare {
    col?: number;
    row?: number;
    cssClass?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}