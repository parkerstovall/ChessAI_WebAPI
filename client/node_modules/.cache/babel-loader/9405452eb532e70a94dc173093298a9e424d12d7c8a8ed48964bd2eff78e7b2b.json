{"ast":null,"code":"var _jsxFileName = \"/Users/parkerstovall/Desktop/WorkStuff/ChessAI_WebAPI/client/src/App.tsx\";\nimport './js/BoardSquare.tsx';\nimport './js/BoardSquareArgs.tsx';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const board = [];\n  const selected = [-1, -1];\n  const enPassantSquare = [-1, -1];\n  const enPassantVictim = [-1, -1];\n  let boardReady = true;\n  let whiteTurn = true;\n  let checkedColor = \"\";\n  document.addEventListener('DOMContentLoaded', function () {\n    const whiteDisplay = document.getElementById(\"WhiteDisplay\");\n    const blackDisplay = document.getElementById(\"BlackDisplay\");\n    if (whiteDisplay !== null && whiteDisplay.children.length === 0) {\n      whiteDisplay.style.display = 'none';\n    }\n    if (blackDisplay !== null && blackDisplay.children.length === 0) {\n      blackDisplay.style.display = 'none';\n    }\n    const pieceOrder = [\"Rook\", \"Knight\", \"Bishop\", \"Queen\", \"King\", \"Bishop\", \"Knight\", \"Rook\"];\n    let whiteSquare = true;\n    let whitePiece = false;\n    for (let i = 0; i < 8; i++) {\n      board.push(new Array());\n      for (var j = 0; j < 8; j++) {\n        const args = new BoardSquareArgs();\n        if (i == 0 || i == 7) {\n          args.piece = (whitePiece ? \"white|\" : \"black|\") + pieceOrder[j];\n        } else if (i == 1 || i == 6) {\n          args.piece = whitePiece ? \"white|Pawn\" : \"black|Pawn\";\n        }\n        args.col = i;\n        args.row = j;\n        args.backColor = whiteSquare ? \"white\" : \"black\";\n        args.pieceClass = board[i][j].backColor + \" boardBtn\";\n        if (args.piece && args.piece != \"\") {\n          args.pieceClass += \" \" + args.piece.split('|').join('');\n        }\n        board[i][j] = new BoardSquare(args);\n        whiteSquare = !whiteSquare;\n      }\n      if (i == 1) {\n        whitePiece = !whitePiece;\n      }\n      whiteSquare = !whiteSquare;\n    }\n  });\n  function boardClick(col, row) {\n    if (!boardReady || board[col][row].piece.split('|')[0] != \"white\" && !board[col][row].isHighlighted) {\n      return;\n    }\n\n    //boardReady = false;\n    /*\n    $.ajax({\n        url: \"../api/chess\",\n        method: \"POST\",\n        data: {\n            board: JSON.stringify(board),\n            selected: JSON.stringify(selected),\n            enPassantSquare: JSON.stringify(enPassantSquare),\n            enPassantVictim: JSON.stringify(enPassantVictim),\n            col: col,\n            row: row,\n            checkedColor: checkedColor\n        },\n        success: function (data) {\n            buildBoard(data);\n             if (!whiteTurn) {\n                $.ajax({\n                    url: \"../api/chess\",\n                    method: \"POST\",\n                    data: {\n                        board: JSON.stringify(board),\n                        enPassantSquare: JSON.stringify(enPassantSquare),\n                        enPassantVictim: JSON.stringify(enPassantVictim),\n                        checkedColor: checkedColor,\n                        compTurn: true\n                    },\n                    success: function (data) {\n                        buildBoard(data);\n                        boardReady = true;\n                    }\n                });\n            }\n            else {\n                boardReady = true;\n            }\n        }\n    });\n    */\n  }\n\n  /*\n  function buildBoard(data) {\n      var args = {\n          isSelected: false,\n          isHighlighted: false,\n          piece: \"\",\n          row: \"\",\n          col: \"\",\n          blackPressure: 0,\n          whitePressure: 0,\n          hasMoved: false,\n          enPassantColor: \"\",\n          backColor: \"\",\n          pinDir: \"\",\n          inCheck: false,\n          blockCheckcolor: \"\",\n          checkmate: false,\n          whitePressureSource: \"\",\n          blackPressureSource: \"\"\n      };\n       selected = [];\n      enPassantVictim = [-1, -1];\n      enPassantSquare = [-1, -1];\n      checkedColor = \"\";\n       for (var i = 0; i < 8; i++) {\n          for (var j = 0; j < 8; j++) {\n              var index = (i * 8) + j;\n              var square = data[index];\n               args.isSelected = square.isSelected;\n              args.isHighlighted = square.isHighlighted;\n              args.hasMoved = square.hasMoved;\n              args.enPassantColor = square.enPassantColor;\n              args.blackPressure = square.blackPressure;\n              args.whitePressure = square.whitePressure;\n              args.col = square.coords[0];\n              args.row = square.coords[1];\n              args.pinned = square.pinned;\n              args.blockCheckColor = square.blockCheckColor;\n              args.checkmate = square.checkmate;\n              args.whitePressureSource = square.whitePressureSource;\n              args.blackPressureSource = square.blackPressureSource;\n              args.inCheck = square.inCheck;\n              args.pinDir = square.pinDir;\n               if (square.moved) {\n                  whiteTurn = !whiteTurn;\n              }\n               if (args.inCheck) {\n                  checkedColor = square.piece.color;\n              }\n               if (square.piece && square.piece !== null) {\n                  args.piece = square.piece.color + \"|\" + square.piece.type;\n              }\n              else {\n                  args.piece = \"\";\n              }\n               if (square.isSelected) {\n                  selected = [parseInt(square.coords[0]), parseInt(square.coords[1])];\n              }\n               if (args.checkmate) {\n                  alert('checkmate ' + square.piece.color);\n              }\n               if (square.enPassantColor != \"\" && square.enPassantVictim != null) {\n                  enPassantSquare = square.coords;\n                  enPassantVictim = [parseInt(square.enPassantVictim[0]), parseInt(square.enPassantVictim[1])];\n              }\n               args.backColor = board[i][j].backColor;\n               board[i][j] = new boardSquare(args);\n              board[i][j].setClass();\n          }\n      }\n  }\n  */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pieceDisplay\",\n      id: \"WhiteDisplay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"GameBoard\",\n      className: \"GameBoard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pieceDisplay\",\n      id: \"BlackDisplay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","Fragment","_Fragment","App","board","selected","enPassantSquare","enPassantVictim","boardReady","whiteTurn","checkedColor","document","addEventListener","whiteDisplay","getElementById","blackDisplay","children","length","style","display","pieceOrder","whiteSquare","whitePiece","i","push","Array","j","args","BoardSquareArgs","piece","col","row","backColor","pieceClass","split","join","BoardSquare","boardClick","isHighlighted","className","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parkerstovall/Desktop/WorkStuff/ChessAI_WebAPI/client/src/App.tsx"],"sourcesContent":["import './js/BoardSquare.tsx';\nimport './js/BoardSquareArgs.tsx';\nimport './App.css';\n\nfunction App() {\n\n  const board: Array<Array<BoardSquare>> = [];\n  const selected = [-1, -1];\n  const enPassantSquare = [-1, -1];\n  const enPassantVictim = [-1, -1];\n  let boardReady = true;\n  let whiteTurn = true;\n  let checkedColor = \"\";\n\n  document.addEventListener('DOMContentLoaded', function () {\n    const whiteDisplay = document.getElementById(\"WhiteDisplay\")\n    const blackDisplay = document.getElementById(\"BlackDisplay\");\n\n    if (whiteDisplay !== null && whiteDisplay.children.length === 0) {\n        whiteDisplay.style.display = 'none';\n    }\n\n    if (blackDisplay !== null && blackDisplay.children.length === 0) {\n        blackDisplay.style.display = 'none';\n    }\n\n    const pieceOrder = [ \"Rook\", \"Knight\", \"Bishop\", \"Queen\", \"King\", \"Bishop\", \"Knight\", \"Rook\" ];\n    let whiteSquare = true;\n    let whitePiece = false;\n\n    for (let i = 0; i < 8; i++) {\n        board.push(new Array<BoardSquare>());\n\n        for (var j = 0; j < 8; j++) {\n            const args : BoardSquareArgs = new BoardSquareArgs;\n\n            if (i == 0 || i == 7) {\n                args.piece = (whitePiece ? \"white|\" : \"black|\") + pieceOrder[j];\n            }\n            else if (i == 1 || i == 6) {\n                args.piece = whitePiece ? \"white|Pawn\" : \"black|Pawn\";\n            }\n\n            args.col = i;\n            args.row = j;\n            args.backColor = (whiteSquare ? \"white\" : \"black\");\n\n            args.pieceClass = board[i][j].backColor + \" boardBtn\";\n\n            if (args.piece && args.piece != \"\") \n            {\n                args.pieceClass += \" \" + args.piece.split('|').join('');\n            }\n\n            board[i][j] = new BoardSquare(args);\n            whiteSquare = !whiteSquare;\n        }\n\n        if (i == 1) {\n            whitePiece = !whitePiece;\n        }\n\n        whiteSquare = !whiteSquare;\n    }\n  });\n      \n  function boardClick(col : number, row : number) {\n      if (!boardReady || ((board[col][row].piece.split('|')[0] != \"white\") && !board[col][row].isHighlighted)) {\n          return;\n      }\n\n      //boardReady = false;\n      /*\n      $.ajax({\n          url: \"../api/chess\",\n          method: \"POST\",\n          data: {\n              board: JSON.stringify(board),\n              selected: JSON.stringify(selected),\n              enPassantSquare: JSON.stringify(enPassantSquare),\n              enPassantVictim: JSON.stringify(enPassantVictim),\n              col: col,\n              row: row,\n              checkedColor: checkedColor\n          },\n          success: function (data) {\n              buildBoard(data);\n\n              if (!whiteTurn) {\n                  $.ajax({\n                      url: \"../api/chess\",\n                      method: \"POST\",\n                      data: {\n                          board: JSON.stringify(board),\n                          enPassantSquare: JSON.stringify(enPassantSquare),\n                          enPassantVictim: JSON.stringify(enPassantVictim),\n                          checkedColor: checkedColor,\n                          compTurn: true\n                      },\n                      success: function (data) {\n                          buildBoard(data);\n                          boardReady = true;\n                      }\n                  });\n              }\n              else {\n                  boardReady = true;\n              }\n          }\n      });\n      */\n  }\n\n  /*\n  function buildBoard(data) {\n      var args = {\n          isSelected: false,\n          isHighlighted: false,\n          piece: \"\",\n          row: \"\",\n          col: \"\",\n          blackPressure: 0,\n          whitePressure: 0,\n          hasMoved: false,\n          enPassantColor: \"\",\n          backColor: \"\",\n          pinDir: \"\",\n          inCheck: false,\n          blockCheckcolor: \"\",\n          checkmate: false,\n          whitePressureSource: \"\",\n          blackPressureSource: \"\"\n      };\n\n      selected = [];\n      enPassantVictim = [-1, -1];\n      enPassantSquare = [-1, -1];\n      checkedColor = \"\";\n\n      for (var i = 0; i < 8; i++) {\n          for (var j = 0; j < 8; j++) {\n              var index = (i * 8) + j;\n              var square = data[index];\n\n              args.isSelected = square.isSelected;\n              args.isHighlighted = square.isHighlighted;\n              args.hasMoved = square.hasMoved;\n              args.enPassantColor = square.enPassantColor;\n              args.blackPressure = square.blackPressure;\n              args.whitePressure = square.whitePressure;\n              args.col = square.coords[0];\n              args.row = square.coords[1];\n              args.pinned = square.pinned;\n              args.blockCheckColor = square.blockCheckColor;\n              args.checkmate = square.checkmate;\n              args.whitePressureSource = square.whitePressureSource;\n              args.blackPressureSource = square.blackPressureSource;\n              args.inCheck = square.inCheck;\n              args.pinDir = square.pinDir;\n\n              if (square.moved) {\n                  whiteTurn = !whiteTurn;\n              }\n\n              if (args.inCheck) {\n                  checkedColor = square.piece.color;\n              }\n\n              if (square.piece && square.piece !== null) {\n                  args.piece = square.piece.color + \"|\" + square.piece.type;\n              }\n              else {\n                  args.piece = \"\";\n              }\n\n              if (square.isSelected) {\n                  selected = [parseInt(square.coords[0]), parseInt(square.coords[1])];\n              }\n\n              if (args.checkmate) {\n                  alert('checkmate ' + square.piece.color);\n              }\n\n              if (square.enPassantColor != \"\" && square.enPassantVictim != null) {\n                  enPassantSquare = square.coords;\n                  enPassantVictim = [parseInt(square.enPassantVictim[0]), parseInt(square.enPassantVictim[1])];\n              }\n\n              args.backColor = board[i][j].backColor;\n\n              board[i][j] = new boardSquare(args);\n              board[i][j].setClass();\n          }\n      }\n  }\n  */\n\n  return (\n    <>\n      <div className=\"pieceDisplay\" id=\"WhiteDisplay\"></div>\n      <div id=\"GameBoard\" className=\"GameBoard\"></div>\n      <div className=\"pieceDisplay\" id=\"BlackDisplay\"></div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAaE,oBACEtC,OAAA,CAAAE,SAAA;IAAAc,QAAA,gBACEhB,OAAA;MAAKuC,SAAS,EAAC,cAAc;MAACC,EAAE,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACtD5C,OAAA;MAAKwC,EAAE,EAAC,WAAW;MAACD,SAAS,EAAC;IAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAChD5C,OAAA;MAAKuC,SAAS,EAAC,cAAc;MAACC,EAAE,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA,eACtD,CAAC;AAEP;AAACC,EAAA,GAxMQ1C,GAAG;AA0MZ,eAAeA,GAAG;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}